8화
--------------------------------------------------------------------------------
1. 로그인

- src\main\webapp\WEB-INF\views\member -> login(기존)

	...
	<script>
	 $(function (){
		$("#btnLogin").click(function(){
		 	var userid=$("#userid").val();
		 	var passwd=$("#passwd").val();
		 	
		 	if (userid == "") {
		 		alert("아이디를 입력해 주세요.");
		 		$("#userid").focus();
		 		return;
		 	}
		 	
		 	if (passwd == "") {
		 		alert("비밀번호를 입력해 주세요.");
		 		$("#passwd").focus();
		 		return;
		 	}
		 	
		 	document.form1.action = "${path}/member/login_check.do";
		 	document.form1.submit();
		}); 
	 });
	</script>
	...

- com.example.spring02.model -> member.dto (패키지 생성)
- com.example.spring02.model.member.dto -> MemberDTO(생성)

package com.example.spring02.model.member.dto;

import java.util.Date;

public class MemberDTO {
	private String userid;
	private String passwd;
	private String name;
	private String email;
	private Date join_date;
	
	public MemberDTO() {
	}
	
	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getPasswd() {
		return passwd;
	}
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getJoin_date() {
		return join_date;
	}
	public void setJoin_date(Date join_date) {
		this.join_date = join_date;
	}
	@Override
	public String toString() {
		return "MemberDTO [userid=" + userid + ", passwd=" + passwd + ", name=" + name + ", email=" + email
				+ ", join_date=" + join_date + "]";
	}
	
	
	
	
}


- com.example.spring02.model -> member.dao (패키지 생성)
- com.example.spring02.model.member.dao -> MemberDAO(interface생성)

package com.example.spring02.model.member.dao;

import com.example.spring02.model.member.dto.MemberDTO;

public interface MemberDAO {
	public boolean loginCheck(MemberDTO dto);
	public MemberDTO viewMember(String userid);
}


- com.example.spring02.model.member.dao -> MemberDAOImpl(생성)

package com.example.spring02.model.member.dao;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.example.spring02.model.member.dto.MemberDTO;

@Repository
public class MemberDAOImpl implements MemberDAO {
	
	@Inject
	SqlSession sqlSession;
	
	@Override
	public boolean loginCheck(MemberDTO dto) {
		String name = sqlSession.selectOne("member.login_check",dto);
		return (name == null) ? false : true;
	}

	@Override
	public MemberDTO viewMember(String userid) {
		 return sqlSession.selectOne("member.viewMember",userid);
	}
	 

}

query test) select name from member where userid='park' and passwd='1234';
-> 있다면 이름이 return, 없다면 null로 리턴.

- src/main/resource/mapper - > member(폴더 생성)
- src/main/resource/mapper/member - > memberMapper(xml 생성)

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="member">
	<select id="login_check"
	parameterType="com.example.spring02.model.member.dto.MemberDTO"
	resultType="String">

			select name
			  from member
			 where userid = #{userid} and passwd = #{passwd}
	</select>

	<select id="viewMember"
			resultType="com.example.spring02.model.member.dto.MemberDTO">
			select *
			  from member
			 where userid = #{userid}
	</select>
</mapper>

- com.example.spring02.service -> member (패키지 생성)
- com.example.spring02.service.member -> MemberService(interface생성)

package com.example.spring02.service.member;

import javax.servlet.http.HttpSession;

import com.example.spring02.model.member.dto.MemberDTO;

public interface MemberService {
	public boolean loginCheck(MemberDTO dto, HttpSession session);
	
	public void logout(HttpSession session);
	
	public MemberDTO viewMember(String userid);
}


- com.example.spring02.service.member -> MemberServiceImpl(생성)

------------------------------------------------------------------------------------------------------------------
정리)   @Controller		| @Service					|@Repository
	~Controller{		| ~ServiceImpl implements [Interface]Service {	|~DAOImple implements [Inter]DAO {
		@Inject		|	@Inject					|	@Inject
		~Service	|	~DAO					|	SqlSession sqlSession;
				|						|	
		...		|	...					|	...
	}			|}						|}
				|						|->~Mapper.xml과 매핑.
------------------------------------------------------------------------------------------------------------------

package com.example.spring02.service.member;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;

import com.example.spring02.model.member.dao.MemberDAO;
import com.example.spring02.model.member.dto.MemberDTO;

@Service
public class MemberServiceImpl implements MemberService {
	
	@Inject
	MemberDAO memberDao;
	
	@Override
	public boolean loginCheck(MemberDTO dto, HttpSession session) {
		boolean result = memberDao.loginCheck(dto);
		if (result) {
			MemberDTO dto2 = viewMember(dto.getUserid());
			session.setAttribute("userid", dto.getUserid());
			session.setAttribute("name", dto2.getName());
		}
		return result;
	}

	@Override
	public void logout(HttpSession session) {
		// TODO Auto-generated method stub

	}

	@Override
	public MemberDTO viewMember(String userid) {
		return memberDao.viewMember(userid);
	}

}



- com.example.spring02.controller.member -> MemberController (기존)

package com.example.spring02.controller.member;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.example.spring02.model.member.dto.MemberDTO;
import com.example.spring02.service.member.MemberService;

@Controller
@RequestMapping("member/*")
public class MemberController {
	private static final Logger LOGGERS = LoggerFactory.getLogger(MemberController.class);
	
	@Inject
	MemberService memberService;
	
	@RequestMapping ("login.do")
	public String login() {
		return "member/login";
	}
	
	@RequestMapping("login_check.do")
	public ModelAndView login_Check(MemberDTO dto, HttpSession session) {
		boolean result = memberService.loginCheck(dto, session);
		
		ModelAndView mav = new ModelAndView();
		if (result) {
			mav.setViewName("home");
			 
		} else {
			mav.setViewName("member/login");
			mav.addObject("message", "error");
		}
		
		return mav;
	}  
}

- src\main\webapp\WEB-INF\views - >home(기존)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page session="true" %> << 변경
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<title>Home</title>
<%@ include file="include/header.jsp" %>
</head>
<body>
<%@ include file="include/menu.jsp" %>

<c:if test="${sessionScope.userid != null}"> <<추가
	<h2>
		${sessionScope.name }
		(${sessionScope.userid}) 님의 방문을 환영 합니다. 
	</h2>
</c:if>
<h1>
	Hello world!  
</h1>

<P>  The time on the server is ${serverTime}. </P>

</body>
</html>

- src\main\webapp\WEB-INF\views\member -> login(기존)
	
	...
	<form name="form1" method="post">
		<table border="1" width="400px">
			<tr>
				<td>아이디</td>
				<td><input name="userid" id="userid"></td>
			</tr>
			
			<tr>
				<td>비밀번호</td>
				<td> <input type="password" name="passwd" id="passwd"></td>
			</tr>
			
			<tr>
				<td colspan="2" align="center">
					<input type="button" id=" btnLogin" value="로그인">
					<c:if test="${message == 'error'}">	<< 추가
						<div style="color: red;">
							아이디 또는 비밀번호가 일치 하지 않습니다.
						</div>
					</c:if>
				</td>
			</tr>
		</table>
	</form>

2. 로그아웃

- src\main\webapp\WEB-INF\views\include\ -> menu (기존)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
 <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
 
<c:set var="path" value="${pageContext.request.contextPath}"/> 
<script src="${path}/include/jquery-3.2.1.min.js"></script>

 <a href="${path}"> home </a> |
 <a href="${path}/memo/list.do"> MEMO </a> |
 <a href="${path}/upload/uploadForm">업로드 테스트</a> |
 <a href="${path}/shop/product/list.do">상품 목록</a> |
 
 <div style="text-align: right;">	
 	<c:choose> << 추가
 		<c:when test="${sessionScpoe.user == null }">
 			<a href="${path}/member/login.do"> 로그인 </a>
 		</c:when>
 		<c:otherwise>
 			${sessionScope.name} 님이 로그인중 입니다. <br>
 			<a href="${path}/member/logout.do"> 로그 아웃 </a>
 		</c:otherwise>
 	</c:choose>
 	
 </div>
 <hr>

- com.example.spring02.controller.member -> MemberController (기존)
	
	...
	@RequestMapping("logout.do")
	public ModelAndView logout(HttpSession session, ModelAndView mav) {
		memberService.logout(session);
		//session.invalidate(); << 원래 이거 한방이면 된다.
		mav.setViewName("member/login");
		mav.addObject("message", "logout");
		return mav;
	}


- com.example.spring02.service.member -> MemberServiceImpl(기존)
	...
	@Override
	public void logout(HttpSession session) {
		session.invalidate();
	}

- src\main\webapp\WEB-INF\views\member -> login(기존)

	...
	<tr>
				<td colspan="2" align="center">
					<input type="button" id=" btnLogin" value="로그인">
					<c:if test="${message == 'error'}">
						<div style="color: red;">
							아이디 또는 비밀번호가 일치 하지 않습니다.
						</div>
					</c:if>
					
					<c:if test="${message == 'logout' }">	<< 추가
						<div style=" color:  black;">
							로그아웃 처리 되었습니다.
						</div>
					</c:if>
				
				</td>
			</tr>

3. 장바구니 기능,cart 테이블 생성, foreign key 설정, 장바구니 리스트까지

create table cart (
  cart_id number not null primary key,
  userid varchar2(50) not null,
  product_id number not null,
  amount number DEFAULT 0
);

alter table cart add constraints cart_userid_fk foreign key(userid) references spring.member(userid);
alter table cart add constraints cart_productid_fk foreign key(product_id) references spring.product(product_id);

- com.example.spring02.model.shop.dto -> CartDTO (생성)

package com.example.spring02.model.shop.dto;

public class CartDTO {
	private int cart_id;
	private String userid;
	private String name;
	private int product_id;
	private String product_name;
	private int price;
	private int money;
	private int amount;
	public int getCart_id() {
		return cart_id;
	}
	public void setCart_id(int cart_id) {
		this.cart_id = cart_id;
	}
	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getProduct_id() {
		return product_id;
	}
	public void setProduct_id(int product_id) {
		this.product_id = product_id;
	}
	public String getProduct_name() {
		return product_name;
	}
	public void setProduct_name(String product_name) {
		this.product_name = product_name;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public int getMoney() {
		return money;
	}
	public void setMoney(int money) {
		this.money = money;
	}
	public int getAmount() {
		return amount;
	}
	public void setAmount(int amount) {
		this.amount = amount;
	}
	
	@Override
	public String toString() {
		return "CartDTO [cart_id=" + cart_id + ", userid=" + userid + ", name=" + name + ", product_id=" + product_id
				+ ", product_name=" + product_name + ", price=" + price + ", money=" + money + ", amount=" + amount
				+ "]";
	}
	
	
}


- com.example.spring02.model.shop.dao -> CartDAO (interface 생성)
package com.example.spring02.model.shop.dao;

import java.util.List;

import com.example.spring02.model.shop.dto.CartDTO;

public interface CartDAO {
	public List<CartDTO> cartMoney();
	public void insert(CartDTO dto);
	public List<CartDTO> listCart(String userid);
	public void delete(int cart_id);
	public void deleteAll(String userid);
	public void update(int cart_id);
	public int sumMoney(String userid);
	public int countCart(String userid, int product_id);
	public void updateCart(CartDTO dto);
	public void modifyCart(CartDTO dto);
	
}

- com.example.spring02.model.shop.dao -> CartDAOImpl (생성)

package com.example.spring02.model.shop.dao;

import java.util.List;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.example.spring02.model.shop.dto.CartDTO;

@Repository
public class CartDAOImpl implements CartDAO {
	
	@Inject
	SqlSession sqlSession;
	
	@Override
	public List<CartDTO> listCart(String userid) {
		return sqlSession.selectList("cart.listCart", userid);
	}
	
	@Override
	public List<CartDTO> cartMoney() {
		return null;
	}

	@Override
	public void insert(CartDTO dto) {
		// TODO Auto-generated method stub

	}

	

	@Override
	public void delete(int cart_id) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteAll(String userid) {
		// TODO Auto-generated method stub

	}

	@Override
	public void update(int cart_id) {
		// TODO Auto-generated method stub

	}

	@Override
	public int sumMoney(String userid) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int countCart(String userid, int product_id) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void updateCart(CartDTO dto) {
		// TODO Auto-generated method stub

	}

	@Override
	public void modifyCart(CartDTO dto) {
		// TODO Auto-generated method stub

	}

}

- src\main\resources\mappers\shop -> cartMapper(생성)

sql) select cart_id, m.userid, name,
        p.product_id, product_name, amount, (price * amount) money
 	from member m, cart c, product p 
	where m.userid = c.userid and p.product_id = c.product_id
	and m.userid = 'kim';

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="cart">
	<select id="listCart"
			resultType="com.example.spring02.model.shop.dto.CartDTO"> 
			select cart_id, m.userid, name,
        		   p.product_id, product_name, amount, price, (price * amount) money
 			  from member m, cart c, product p 
			 where m.userid = c.userid and p.product_id = c.product_id
			   and m.userid = #{userid}  
	</select>
</mapper>

- com.example.spring02.service.shop -> CartService (interface 생성)

package com.example.spring02.service.shop;

import java.util.List;

import com.example.spring02.model.shop.dto.CartDTO;

public interface CartService {
	public List<CartDTO> cartMoney();
	public void insert(CartDTO dto);
	public List<CartDTO> listCart(String userid);
	public void delete(int cart_id);
	public void deleteAll(String userid);
	public void update(int cart_id);
	public int sumMoney(String userid);
	public int countCart(String userid, int product_id);
	public void updateCart(CartDTO dto);
	public void modifyCart(CartDTO dto);
}

- com.example.spring02.service.shop -> CartServiceImpl (생성)

package com.example.spring02.service.shop;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.example.spring02.model.shop.dao.CartDAO;
import com.example.spring02.model.shop.dto.CartDTO;

@Service
public class CartServiceImpl implements CartService {
	
	@Inject
	CartDAO cartDao;
	
	@Override
	public List<CartDTO> listCart(String userid) {
		return cartDao.listCart(userid);
	}
	
	@Override
	public List<CartDTO> cartMoney() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void insert(CartDTO dto) {
		// TODO Auto-generated method stub

	}

	@Override
	public void delete(int cart_id) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteAll(String userid) {
		// TODO Auto-generated method stub

	}

	@Override
	public void update(int cart_id) {
		// TODO Auto-generated method stub

	}

	@Override
	public int sumMoney(String userid) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int countCart(String userid, int product_id) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void updateCart(CartDTO dto) {
		// TODO Auto-generated method stub

	}

	@Override
	public void modifyCart(CartDTO dto) {
		// TODO Auto-generated method stub

	}

}

- src\main\webapp\WEB-INF\views\include\ -> menu (기존)

	...	
	<a href="${path}"> home </a> |
	<a href="${path}/memo/list.do"> MEMO </a> |
	<a href="${path}/upload/uploadForm">업로드 테스트</a> |
	<a href="${path}/shop/product/list.do">상품 목록</a> |
	<c:if test="${sessionScope.userid != null }">  << 추가
 		<a href="${path}/shop/cart/list.do"> 장바구니 </a> |
	</c:if>


- com.example.spring02.controller.shop -> CartController (기존)

	...
	
	@Inject
	CartService cartService;
	
	@RequestMapping("list.do")
	public ModelAndView listCart(HttpSession session, ModelAndView mav) {
		Map<String, Object> map = new HashMap<>();
		String userid = (String) session.getAttribute("userid");
		if (userid != null) {
			List<CartDTO> list = cartService.listCart(userid);
			map.put("list", list);
			map.put("count", list.size());
			mav.setViewName("shop/cart_list");
			mav.addObject("map", map);
			return mav;
		} else {
			return new ModelAndView("member/login", "", null);
		}
		
	}
	...

- src\main\webapp\WEB-INF\views\shop -> cart_list(jsp 생성)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<%@ include file="../include/header.jsp" %>
</head>
<body>
<%@ include file="../include/menu.jsp" %>
	<h2> 장바구니 </h2>
		<c:choose>
			<c:when test="${map.count == 0}">
				장바구니가 비었습니다.
			</c:when>
				<form name="form1" method="post" 
					  action="${path}/shop/cart/update.do">	
					<table border="1" width="400px">
						<tr>	
							<td>상품명</td>
							<td>단가</td>
							<td>수량</td>
							<td>금액</td>
							<td>&nbsp;</td>
						</tr>
						<c:forEach var="row" items="${map.list}">
							<tr>
								<td>${row.product_name}</td>
								<td>${row.price}</td>
								<td>
						<input type="number" name="amount" value="${row.amount}">
						<input type="hidden" name="product_id" value="${row.product_id}">
								</td>
								<td>${row.money}</td>
								<td>
						<a href="${path}/shop/cart/delete.do?cart_id=${row.cart_id}">
									삭제</a>
								</td>
							</tr>
						</c:forEach>
					</table>
				</form>
			<c:otherwise>
			
			</c:otherwise>
		</c:choose>
</body>
</html>

4. 장바구니 추가
- src\main\webapp\WEB-INF\views\shop -> product_detail(기존)
내용확인

- com.example.spring02.controller.shop -> CartController (기존)
	
	...
	@RequestMapping("insert.do") << 기존에 있는 메소드, 코드 수정
	public String insert(HttpSession session, @ModelAttribute CartDTO dto) {
		String userid = (String) session.getAttribute("userid");
		if (userid == null) {
			return "redirect:/member/login.do";
		} 
		
		dto.setUserid(userid);
		cartService.insert(dto);
		return "redirect:/shop/cart/list.do";
	}
	
- com.example.spring02.service.shop -> CartServiceImpl (기존)

	...	
	@Override
	public void insert(CartDTO dto) {
		cartDao.insert(dto);
	}

- com.example.spring02.model.shop.dao -> CartDAOImpl (기존)
	
	...
	@Override
	public void insert(CartDTO dto) {
		sqlSession.insert("cart.insert", dto);
	}

- src\main\resources\mappers\shop -> cartMapper(기존)

sql) sequence 작성
-- 장바구니 레코드 삭제
delete from cart;
-- 장바구니 코드 발급을 위한 시퀀스 생성
create sequence cart_seq
start with 1
increment by 1

-- 레코드 생성(12)
insert into cart values(cart_seq.nextval,'im',2,20);
insert into cart values(cart_seq.nextval,'im',3,30);
insert into cart values(cart_seq.nextval,'kim',1,10);

commit;

	...
	<insert id="insert">
		insert 
		  into cart (cart_id, userid, product_id, amount) 
		values (cart_seq.nextval,#{userid},#{product_id},#{abount});
	</insert>

--------------------------------------------------------------------------------
9화
--------------------------------------------------------------------------------

1. 화면 구성 및 합계 배송료    

- src\main\webapp\WEB-INF\views\shop -> cart_list(기존)

	...
	<c:forEach var="row" items="${map.list}">
							<tr>
								<td>${row.product_name}</td>
								<td>${row.price}</td>
								<td>
						<input type="number" name="amount" value="${row.amount}">
						<input type="hidden" name="product_id" value="${row.product_id}">
								</td>
								<td>${row.money}</td>
								<td>
						<a href="${path}/shop/cart/delete.do?cart_id=${row.cart_id}">
					   				삭제</a>
								</td>
							</tr>
						</c:forEach>
						
						<tr> << 추가
							<td colspan="5" align="right">
								장바구니 급액 합계 : ${map.sumMoney} <br> 
								배송료 : ${map.fee} <br>
								총 합계 : ${map.sum}
							</td>
						</tr>
					</table>
					<button id="btnUpdate"> 수정 </button>  << 추가
				</form>
			</c:otherwise>
		</c:choose>
		<button type="button" id="btnDelete"> 장바구니 비우기</button> << 추가
		<button type="button" id="btnList"> 상품 목록</button> << 추가
</body>
</html>

- src\main\resources\mappers\shop -> cartMapper(기존)

sql) -- 장바구니 금액 합계 (oracle query)
	select nvl(sum(price * amount), 0) money
	  from product p, cart c
  	 where p.product_id = c.produt_id
	   and userid = 'im';	
				
	(ansi query)
	select nvl(sum(price * amount), 0) money
	  from product p join cart c
	    on p.product_id = c.product_id
  	 where userid = 'im';

	...
	<select id="sumMoney"
			resultType="int">
			
			select nvl(sum(price * amount), 0) money
			  from product p, cart c
			 where p.product_id = c.product_id
			   and userid= #{userid}
			
	</select>

- com.example.spring02.model.shop.dao -> CartDAOImpl (기존)

	...
	@Override
	public int sumMoney(String userid) {
		return sqlSession.selectOne("cart.sumMoney", userid);
	}

- com.example.spring02.service.shop -> CartServiceImpl (기존)

	...
	@Override
	public int sumMoney(String userid) {
		return cartDao.sumMoney(userid);
	}

- com.example.spring02.controller.shop -> CartController (기존)

	...
	@RequestMapping("list.do") //기존
	public ModelAndView listCart(HttpSession session, ModelAndView mav) {
		Map<String, Object> map = new HashMap<>();
		String userid = (String) session.getAttribute("userid");
		if (userid != null) {
			List<CartDTO> list = cartService.listCart(userid);
			
			//장바구니 합계 계산 << 추가
			int sumMoney = cartService.sumMoney(userid); << 추가
			int fee = sumMoney >= 30000 ? 0 : 2500; << 추가
			
			map.put("sumMoney", sumMoney); << 추가
			map.put("fee", fee); << 추가
			map.put("sum", (sumMoney + fee)); << 추가
			
			
			map.put("list", list);
			map.put("count", list.size());
			mav.setViewName("shop/cart_list");
			mav.addObject("map", map);
			return mav;
		} else {
			return new ModelAndView("member/login", "", null);
		}
		
	}

- src\main\webapp\WEB-INF\views\shop -> cart_list(기존)

	...
		<c:otherwise>
				<form name="form1" method="post" 
					  action="${path}/shop/cart/update.do">	
					<table border="1" width="500px">
						<tr>	
							<td>상품명</td>
							<td>단가</td>
							<td>수량</td>
							<td>금액</td>
							<td>&nbsp;</td>
						</tr>
						<c:forEach var="row" items="${map.list}">
							<tr>
				<td>${row.product_name}</td>
				<td><fmt:formatNumber value="${row.price}" pattern="#,###"/> 원</td> <<변경
				<td><input type="number" name="amount" value="${row.amount}"> 
				   <input type="hidden" name="product_id" value="${row.product_id}">
				</td>
				<td><fmt:formatNumber value="${row.money}" pattern="#,###"/> 원</td> <<변경
				<td>
				<a href="${path}/shop/cart/delete.do?cart_id=${row.cart_id}">
					삭제</a>
				</td>
						</tr>   
						</c:forEach>
						
						<tr>
							<td colspan="5" align="right">
		장바구니 급액 합계 : <fmt:formatNumber value="${map.sumMoney}" pattern="#,###"/> 원<br> <<추가
		배송료 : <fmt:formatNumber value="${map.fee}" pattern="#,###"/> 원 <br> <<추가
		총 합계 : <fmt:formatNumber value="${map.sum}" pattern="#,###"/> 원 <<추가
							</td>
						</tr>
					</table>
					<button id="btnUpdate"> 수정 </button> <br>
					<button type="button" id="btnDelete"> 장바구니 비우기</button> << 위치 변경
				</form>
			</c:otherwise>

2. 상품 삭제
	
- com.example.spring02.controller.shop -> CartController (기존)

	...
	@RequestMapping("delete.do")
	public String delete(@RequestParam int cart_id) {
		cartService.delete(cart_id);
		return "redirect:/shop/cart/list.do";
	}

	tip) @RequestParam : request.getParameter << 한개만 받는다. 그래서 @RequestParam int cart_id 이지만,
	     @ModelAttribute:	request.getParameter가 dto만큼 받는다.
	     @PathVariable : restful pathvariable 즉 delete.do?cart_id=${row.cart_id} 아닌 delete/${row.cart_id}로
	     @ResponseBody : controller 메서드의 리턴값을 json으로 변환  	

- com.example.spring02.service.shop -> CartServiceImpl (기존)
	
	...
	@Override
	public void delete(int cart_id) {
		cartDao.delete(cart_id);
	}

- com.example.spring02.model.shop.dao -> CartDAOImpl (기존)
	
	...
	@Override
	public void delete(int cart_id) {
		sqlSession.delete("cart.delte", cart_id);
	}
	

- src\main\resources\mappers\shop -> cartMapper(기존)

	...
	<delete id="delete">
			
		delete 
		  from cart
		 where cart_id = #{cart_id}
			
	</delete>
 
- 작업시 프로젝트 디렉토리는 1개만 오픈 시켜 놓고 한다.
  Servers 에도 하나만 남도록 해서 작업한다.

  그리고 아무봐도 이상이 없는 코드와 작업인대 작동을 안한다면, 
  1) 해당 프로젝트 선택 menu - project- clean을 해보아라.
  2) Servers - (오른쪽 클릭) - clean
  3) Servers - (오른쪽 클릭) - clean Tomcat work directory
  4) 해당 프로젝트 선택 (오른쪽 클릭) Maven - Update Project
  
  이렇게 하는 이유는 실무는 개발은 왠만하면 윈도우즈 배포는 유닉스(리눅스)(서버에 업로드, 톰캣 재시작)
  환경에 배포한다.
  그것을 지금은 윈도우즈에서 실시간으로 <%=application.getRealPath("/") %> 에 반영하지만, 시간차 가 있으므로
  원하는 작업결과를 빨리 얻지 못할수도 있으니. 기다려보거나, 위의 방법을 써보도록 하자.

3. 장바구니 비우기(아이템 있는 상태에서 한번에 클리어 시키는 기능)

- src\main\webapp\WEB-INF\views\shop -> cart_list(기존)

	...
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	<%@ include file="../include/header.jsp" %>

	<script > << 추가
	$(function() {
		$("#btnDelete").click(function(){
			if (confirm("장바구니를 비우시겠습니까?")) {
				location.href ="${path}/shop/cart/deleteAll.do";
			}
		});
	});
	</script>

	</head>

	tip) 	<input type="button" value="some label"> => 제출 기능 없음.
		<input type="submit" value="some label"> => 제출 기능 있음.
		<input type="reset" value="some label"> => 입력값 초기화.
		<input type="image" value="some label"> => 제출 기능 있음.
		
		<button> some label </button>		=>제출 기능 있음 , type="submit" 이 생략
		<button type="submit"> some label </button> => 위와 같음. 명시적,가독성으로 써줄때도 있음.
		<button type="button"> some label </button> => 제출 기능 없음.	

- com.example.spring02.controller.shop -> CartController (기존)
	
	...
	@RequestMapping("deleteAll.do")
	public String deleteAll(HttpSession session) {
		 String userid = (String)session.getAttribute("userid");
		 if (userid != null) {
			 cartService.deleteAll(userid);
		 }
		 
		 return "redirect:/shop/cart/list.do";
	}


- com.example.spring02.service.shop -> CartServiceImpl (기존)
	
	...
	@Override
	public void deleteAll(String userid) {
		cartDao.deleteAll(userid);
	}

- com.example.spring02.model.shop.dao -> CartDAOImpl (기존)

	...
	@Override
	public void deleteAll(String userid) {
		sqlSession.delete("cart.deleteAll", userid);
	}
	
- src\main\resources\mappers\shop -> cartMapper(기존)
		
sql) delete from cart where userid= 'im';
	
	...
	<delete id="deleteAll"> 
		
		delete
		  from cart
		 where userid = #{userid}
		
	</delete>

4. 수량 수정
- src\main\webapp\WEB-INF\views\shop -> cart_list(기존)
	
			...
			<c:forEach var="row" items="${map.list}">
			<tr>
				<td>${row.product_name}</td>
				<td><fmt:formatNumber value="${row.price}" pattern="#,###"/> 원</td>
				<td>
				<input type="number" name="amount" value="${row.amount}">
				<input type="hidden" name="cart_id" value="${row.cart_id}"> << 코드 수정
				</td>
				<td><fmt:formatNumber value="${row.money}" pattern="#,###"/> 원</td>
				<td>
				<a href="${path}/shop/cart/delete.do?cart_id=${row.cart_id}">
				삭제</a>
				</td>
			</tr>   
			</c:forEach>

- com.example.spring02.controller.shop -> CartController (기존)
	
	...
	@RequestMapping("update.do")
	 public String update(@RequestParam int[] amount, 
			 			  @RequestParam int[] cart_id, HttpSession session) {
		String userid = (String) session.getAttribute("userid");
		if (userid != null) {
			for (int i = 0; i < cart_id.length; i++) {
				
				if (amount[i] == 0) {
					cartService.delete(cart_id[i]);
				}  else {	
				
				CartDTO dto = new CartDTO();
				dto.setUserid(userid);
				dto.setCart_id(cart_id[i]);
				dto.setAmount(amount[i]);
				cartService.modifyCart(dto);
			    }
			}
		}
		return "redirect:/shop/cart/list.do";
	}


- com.example.spring02.service.shop -> CartServiceImpl (기존)
	
	...
	@Override
	public void modifyCart(CartDTO dto) {
		cartDao.modifyCart(dto);
	}


- com.example.spring02.model.shop.dao -> CartDAOImpl (기존)
	
	...
	@Override
	public void modifyCart(CartDTO dto) {
		sqlSession.update("cart.modifyCart", dto);
	}

- src\main\resources\mappers\shop -> cartMapper(기존)

	...
	<update id="modifyCart">
		
		update cart
		   set amount = #{amount}
		  where cart_id = {cart_id}
		 
	</update>

5. 상품목록 가기	
- src\main\webapp\WEB-INF\views\shop -> cart_list(기존)

	...	
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	<%@ include file="../include/header.jsp" %>

	<script >
		$(function() {
			
			$("#btnList").click(function() { << 추가
				location.href = "${path}/shop/product/list.do";
			});
		
			$("#btnDelete").click(function(){
				if (confirm("장바구니를 비우시겠습니까?")) {
					location.href ="${path}/shop/cart/deleteAll.do";
				}
			});
		});
	</script>

	</head>

6. 관리자 역활

sql) 관리자 테이블.
	
  drop table  admin cascade constratints;

  create table admin (
  userid varchar2(50) not null primary key,
  passwd varchar2(50) not null,
  name varchar2(50) not null,
  email varchar2(100),
  join_date date default sysdate
);

insert into admin (userid, passwd, name) values ('admin', '1234', 'administrator');


- com.example.spring02.model -> admin (패키지 생성)
- com.example.spring02.model.admin -> AdminDAO (생성)

package com.example.spring02.model.admin;

import com.example.spring02.model.member.dto.MemberDTO;

public interface AdminDAO {
	public String loginCheck(MemberDTO dto);
}


- com.example.spring02.model.admin -> AdminDAOImpl (생성)

package com.example.spring02.model.admin;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import com.example.spring02.model.member.dto.MemberDTO;

@Repository
public class AdminDAOImpl implements AdminDAO {
	
	@Inject
	SqlSession sqlSession;
	
	@Override
	public String loginCheck(MemberDTO dto) {
		return sqlSession.selectOne("admin.login_check", dto);
	}

}

- src\main\resources\mappers\member -> adminMapper(생성)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="admin">
	<select id="login_check"
			resultType="String">
			
			select name
			  from admin
			 where userid = #{userid} and passwd = #{passwd}
			
	</select>
</mapper>

- com.example.spring02.service -> admin (패키지 생성)
- com.example.spring02.service.admin -> adminService (생성)

package com.example.spring02.service.admin;

import com.example.spring02.model.member.dto.MemberDTO;

public interface adminService {
	public String loginCheck(MemberDTO dto);
}


- com.example.spring02.service.admin -> adminServiceImpl (생성)

package com.example.spring02.service.admin;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.example.spring02.model.admin.AdminDAO;
import com.example.spring02.model.member.dto.MemberDTO;

@Service
public class adminServiceImpl implements adminService {
	
	@Inject
	AdminDAO adminDao;
	
	@Override
	public String loginCheck(MemberDTO dto) {
		return adminDao.loginCheck(dto);
	}

}


- com.example.spring02.controller -> admin (생성)
- com.example.spring02.controller.admin ->AdminController (생성)

package com.example.spring02.controller.admin;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.spring02.service.admin.adminService;

@Controller
@RequestMapping("admin/*")
public class AdminController {
	
	@Inject
	adminService adminService;
	
	@RequestMapping("login.do")
	public String login() {
		return "admin/login";
	}
	
}

- src\main\webapp\WEB-INF\views\include -> menu(기존)

<div style="text-align: right;">
 	<c:choose> 
 		<c:when test="${sessionScope.userid == null }">
 			<a href="${path}/member/login.do"> 로그인 </a> | <<파이프 라인 추가
 			<a href="${path}/amdin/login.do"> 관리자 로그인</a> << 추가
 		</c:when>
 		
 		<c:otherwise>
 			${sessionScope.name}님! 로그인 하셨습니다. <br>
 			<a href="${path}/member/logout.do">로그 아웃</a>
 		</c:otherwise>
 	</c:choose>
 	
 </div>
 <hr>


- src\main\webapp\WEB-INF\views -> admin (폴더생성)
- src\main\webapp\WEB-INF\views\admin\ -> login(jsp생성)
views\member - > login.jsp 을 복붙~
그중에서 아래 << 변경 확인!

...
<script>
	$(function (){
		$("#btnLogin").click(function() {
			var userid = $("#userid").val();
			var passwd = $("#passwd").val();
			if (userid == "") {
				alert("input your id");
				$("#userid").focus();
				return;
			}
			if(passwd = "") {
				alert("input your passwd");
				$("passwd").focus();
				return;
			}
			
			document.form1.action="${path}/admin/login_check.do"; << 변경
			document.form1.submit();
			 
		});
	});
</script>
</head>
<body>
<%@ include file="../include/menu.jsp" %>
	<h2>관리자 로그인</h2> << 이부분은 센스있게.
...

- com.example.spring02.controller.admin ->AdminController (기존)

	...
	@RequestMapping("login_check.do")
	public ModelAndView login_check(MemberDTO dto, HttpSession session, ModelAndView mav) {
		String name = adminService.loginCheck(dto);
		
		if (name != null) {
			session.setAttribute("admin_userid", dto.getUserid());
			session.setAttribute("admin_name", name);
			
			session.setAttribute("userid", dto.getUserid());
			session.setAttribute("name", name);
			
			
		} else {
			mav.setViewName("admin/login");
			mav.addObject("message", "error");
		}
		
		return mav;
	}


- src\main\webapp\WEB-INF\views\admin\ -> admin(jsp생성)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<%@ include file="../include/header.jsp" %>
</head>
<body>
<%@ include file="../include/admin_menu.jsp" %> << 수정
	<h2>
		${sessionScope.admin_name} <br>
		(${sessionScope.admin_userid}) 님 환영합니다.
	</h2>
</body>
</html>

- src\main\webapp\WEB-INF\views\include\ -> admin_menu(jsp생성)
기존 include\menu 내용을 include\ -> admin_menu로 복붙 후 수정

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
 <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
 
<c:set var="path" value="${pageContext.request.contextPath}"/> 
<script src="${path}/include/jquery-3.2.1.min.js"></script>

 
 <a href="${path}/shop/product/list.do">상품 목록</a> | <<기존
  <a href="${path}/shop/product/write.do">상품 등록</a> | <<새로운
 
 <div style="text-align: right;">
 	<c:choose> 
 		<c:when test="${sessionScope.admin_userid == null }">
 			<a href="${path}/admin/login.do"> 관리자 로그인</a> <<새로운
 		</c:when>
 		
 		<c:otherwise>
 			${sessionScope.admin_name}님! 로그인 하셨습니다. <br>
 			<a href="${path}/admin/logout.do">로그 아웃</a> <<수정
 		</c:otherwise>
 	</c:choose>
 	
 </div>
 <hr>
 
- com.example.spring02.controller.admin ->AdminController (기존)
	
	...
	@RequestMapping("logout.do")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/admin/login.do";
	}


--------------------------------------------------------------------------------

10 화
--------------------------------------------------------------------------------

1. 관리자 상품등록(product/write.do)

- src\main\java\com\example\spring02\controller\shop -> ProductController

	...
	@RequestMapping("write.do")
	public String write() {
		return "shop/product_write";
	}

- src\main\webapp\WEB-INF\views\shop -> product_write(jsp생성)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<%@ include file="../include/header.jsp" %>
</head>
<body>
<%@ include file="../include/admin_menu.jsp" %>

<script>
	function product_write() {
		// 태그를 name으로 조회할 경우
		// var product_name = document.form1.product_name.value;
		//태그 id로 조회할 경우
		var product_name = $("product_name").val();
		var price = $("price").val();
		var decription = $("description").val();
		if (product_name == "") {
			alert("상품 이름을 입력하세요.");
			$("#product_name").focus();
			return;
		}
		if (price == "") {
			alert("가격을 입력 하세요.")
			$("#price").focus();
			return;
		}
		if (description == "") {
			alert("상품 성명을 입력하세요.")
			$("#description").focus();
			return;
		}
		//폼 데이터를 받을 주소
		document.form1.action = "${path}/shop/product/insert.do";
		// 폼 데이털ㄹ 서버에 전송
		document.form1.submit();
		
	}
</script>

<h2>상품 등록</h2><br>

<form name="form1" method="post" 
	  enctype="multipart/form-data">
	  <table>
	  	<tr>
	  		<td>상품명</td>
	  		<td>
	  			<input name="product_name" id="product_name">
	  		</td>
	  	</tr>
	  	<tr>
			<td>가격</td>
			<td>
				<input name="price" id="price">
			</td>
	  	</tr>
	  	<tr>
	  		<td>상품 설명</td>
	  		<td>
	  			<textarea rows="5" cols="60" name="description" id="description">
	  			</textarea>
	  		</td>
	  	</tr>
	  	<tr>
	  		<td>상품 이미지</td>
	  		<td>
	  		 	<input type="file" name="file1" id="file1">
	  		</td>
	  	</tr>
	  	<tr>
	  		<td colspan="2" align="center">
	  			<input type="button" value="등록" onclick="product_write()">
	  			<input type="button"  value="목록" 					onclick="location.href='${path}/shop/product/list.do'">
	  		</td>
	  	</tr>
	  </table>
</form>

</body>
</html>

tip) 파일 첨부 하려면 꼭 2가지 설정을 해야한다.
1. jsp 에서
<form name="form1" method="post" 
	  enctype="multipart/form-data"> method="post" 과 enctype="multipart/form-data" 설정.

2. servlet-context.xml 에서 
<!-- 파일 업로드 관련 설정 -->
	<beans:bean id="multipartResolver"
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<beans:property name="maxUploadSize" value="10485760"></beans:property>
	</beans:bean>
	
 	<!--  파일 업로드를 위한 디렉토리 설정-->
	<beans:bean id="uploadPath"
				class="java.lang.String">
				<beans:constructor-arg value="d:/upload"/>
	</beans:bean>

- src\main\webapp\WEB-INF\views\shop -> product_edit(jsp생성)

3. 태그 id, name 속성
id : 중복 x,  #으로 인식(java script), document.getElementById("id")
name : 중복 o, java code 인식, document.getElementByName("name")


- src\main\java\com\example\spring02\controller\shop -> ProductController (기존)

	...	
	@RequestMapping("insert.do")
	public String insert(@ModelAttribute ProductDTO dto) {
		String filename = "-";
		if(!dto.getFile1().isEmpty()) {
			// 첨부 파일의 파일의 이름
			filename = dto.getFile1().getOriginalFilename();
			try {
				// 업로드 할 디렉토리
				//String path = "D:\\work\\spring02\\src\\main\\webapp\\WEB-INF\\views\\images\\";
				// 배포 디렉토리로 샛팅
				String path = "D:\\work\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\						\wtpwebapps\\spring02\\WEB-INF\\views\\images\\";
				//디렉토리가 존재하지 않으면 생성
				new File(path).mkdir();
				// 임시 디렉토리에 저장된 파일을 path + 이름으로 이동
				dto.getFile1().transferTo(new File(path + filename));
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
		}
		dto.setPicture_url(filename);
		productService.insertProduct(dto);
		return "redirect:/shop/product/list.do";
	}

- src\main\java\com\example\spring02\service\shop -> ProductServiceImpl(기존)

	...
	@Override
	public void insertProduct(ProductDTO dto) {
		productDao.insertProduct(dto);

	}

- src\main\java\com\example\spring02\model\shop\dao -> ProductDAOImpl (기존)
	
	...
	@Override
	public void insertProduct(ProductDTO dto) {
		sqlSession.insert("product.insert",dto);

	}

- src\main\resources\mappers\shop\productMapper (기존)
	
	...
	<insert id="insert">
			insert 
			  into product
			values (seq_product.nextval, #{product_name}, #{price}, #{description}, #{picture_url}) 
	</insert>

2. 상품목록 수정; 상품명 셀 안에 편집버튼 만들어서 화면 디테일한 후 수정

- src\main\webapp\WEB-INF\views\shop - > product_list (기존)

	...
	<c:forEach var="row" items="${list}">
			<tr>
				<td>${row.product_id}</td>
				<td> <img src="${path}/images/${row.picture_url}" width="100px" height="100px"> 
				</td>
				<td> <a href="${path}/shop/product/detail/${row.product_id}">
					 ${row.product_name} </a>
					 <c:if test="${sessionScope.admin_userid != null}"> <<추가
					 	<br>
					 	<a href="${path}/shop/product/edit/${row.product_id}">
					 	[편 집]</a>
					 </c:if>
				</td>
				<td> <fmt:formatNumber value="${row.price}" pattern="#,###"/>
				</td>
			</tr>
		</c:forEach>	


- src\main\java\com\example\spring02\controller\shop -> ProductController (기존)

	...
	@RequestMapping("edit/{product_id}")
	public ModelAndView edit(@PathVariable("product_id") int product_id, 
							ModelAndView mav) {
		mav.setViewName("/shop/product_id");
		mav.addObject("dto", productService.deatilProduct(product_id));
		return mav;
	}

- src\main\webapp\WEB-INF\views\shop - > product_edit (생성)
product_write 내용 복붙 후 수정

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<%@ include file="../include/header.jsp" %>
</head>
<body>
<%@ include file="../include/admin_menu.jsp" %>

<script>
	function product_update() {
		// 태그를 name으로 조회할 경우
		// var product_name = document.form1.product_name.value;
		//태그 id로 조회할 경우
		var product_name = $("product_name").val();
		var price = $("price").val();
		var decription = $("description").val();
		if (product_name == "") {
			alert("상품 이름을 입력하세요.");
			$("#product_name").focus();
			return;
		}
		if (price == "") {
			alert("가격을 입력 하세요.")
			$("#price").focus();
			return;
		}
		if (description == "") {
			alert("상품 성명을 입력하세요.")
			$("#description").focus();
			return;
		}
		
		document.form1.action = "${path}/shop/product/update.do"; <<수정
		document.form1.submit();
		
	}
</script>

<h2>상품 정보 편집</h2><br>

<form name="form1" method="post" 
	  enctype="multipart/form-data">
	  <table>
	  	<tr>
	  		<td>상품명</td>
	  		<td>
	  			<input name="product_name" id="product_name" value="${dto.product_name}">
	  		</td>
	  	</tr>
	  	<tr>
			<td>가격</td>
			<td>
				<input name="price" id="price" value="${dto.price}">
			</td>
	  	</tr>
	  	<tr>
	  		<td>상품 설명</td>
	  		<td>
	  			<!--textarea는 공백을 주면 안된다. 코드공백만큼 페이지에서보인다.  -->
	  			<textarea rows="5" cols="60"  <<확인
	  					  name="description" id="description">${dto.description}</textarea>
	  		</td>
	  	</tr>
	  	<tr>
	  		<td>상품 이미지</td>
	  		<td>
	  			<img src="${path}/images/${dto.picture_url}"
	  			width="300px" height="300px"> <br>
	  			
	  		 	<input type="file" name="file1" id="file1">
	  		</td>
	  	</tr>
	  	<tr>
	  		<td colspan="2" align="center">
	  			<input type="hidden" name="product_id" value="${dto.product_id}"> <<수정
	  			<input type="button" value="수정" onclick="product_update()"> <<수정
	  			<input type="button" value="삭제" onclick="">
	  			<input type="button" value="목록" onclick="location.href='${path}/shop/product/list.do'">
	  		</td>
	  	</tr>
	  </table>
</form>

</body>
</html>

- src\main\java\com\example\spring02\controller\shop -> ProductController (기존)

	...
	@RequestMapping("update.do")
	public String update(ProductDTO dto) {
		String filename = "-";
		if(!dto.getFile1().isEmpty()) {
			//새로운 첨부 파일이 있으면
			filename = dto.getFile1().getOriginalFilename();
			try {
				String path = "D:\\work\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\spring02\\WEB-INF\\views\\images\\";
				new File(path).mkdir();
				    
				dto.getFile1().transferTo(new File(path + filename));
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			dto.setPicture_url(filename); << 위치변경
		} else { <<추가
			ProductDTO dto2 = productService.deatilProduct(dto.getProduct_id());
			dto.setPicture_url(dto2.getPicture_url());
		}
		
		productService.updateProduct(dto);
		return "redirect:/shop/product/list.do";
	}
	
- src\main\java\com\example\spring02\service\shop -> ProductServiceImpl(기존)
	...
	@Override
	public void updateProduct(ProductDTO dto) {
		productDao.updateProduct(dto);
	}

- src\main\java\com\example\spring02\model\shop\dao -> ProductDAOImpl (기존)
 
	...
	@Override
	public void updateProduct(ProductDTO dto) {
		sqlSession.update("product.update_product", dto);
	}

- src\main\resources\mappers\shop\productMapper (기존)	

	...
	<update id="update_product">
			update product
			   set product_name = #{product_name},
			   	   price = #{price},
			   	   description = #{description},
			   	   picture_url = #{picture_url}
			 where product_id = #{product_id}		
	</update>

3. 상품목록 삭제; 상품명 셀 안에 편집버튼 (화면변경) 디테일한 후 삭제

- src\main\webapp\WEB-INF\views\shop - > product_edit (기존)
	
	...
	<script>
	function product_delete() { <<추가
		if(confirm("삭제 하시겠습니까?")) {
			document.form1.action = "${path}/shop/product/delete.do";
			document.form1.submit();
		}
	}

	function product_update() {
		// 태그를 name으로 조회할 경우
		// var product_name = document.form1.product_name.value;
		//태그 id로 조회할 경우
		var product_name = $("product_name").val();
		var price = $("price").val();
		var decription = $("description").val();
		if (product_name == "") {
			alert("상품 이름을 입력하세요.");
			$("#product_name").focus();
			return;
		}
		if (price == "") {
			alert("가격을 입력 하세요.")
			$("#price").focus();
			return;
		}
		if (description == "") {
			alert("상품 성명을 입력하세요.")
			$("#description").focus();
			return;
		}
		
		document.form1.action = "${path}/shop/product/update.do";
		document.form1.submit();
		
	}
</script>

<h2>상품 정보 편집</h2><br>
	

	...	
		<tr>
	  		<td>상품 이미지</td>
	  		<td>
	  			<img src="${path}/images/${dto.picture_url}"
	  			width="300px" height="300px"> <br>
	  			
	  		 	<input type="file" name="file1" id="file1">
	  		</td>
	  	</tr>
	  	<tr>
	  		<td colspan="2" align="center">
	  			<input type="hidden" name="product_id" value="${dto.product_id}">
	  			<input type="button" value="수정" onclick="product_update()">
	  			<input type="button" value="삭제" onclick="product_delete()"> << 코드 변경
	  			<input type="button" value="목록" 				onclick="location.href='${path}/shop/product/list.do'">
	  		</td>
	  	</tr>
	  </table>
</form>


- src\main\java\com\example\spring02\controller\shop -> ProductController (기존)

	...
	@RequestMapping("delete.do")
	public String delete(int  product_id) {
		//첨부 파일 삭제
		String filename = productService.fileInfo(product_id);
		if (filename != null && !filename.equals("-")) {
			String path = "D:\\work\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\
					wtpwebapps\\spring02\\WEB-INF\\views\\images\\";
			File f = new File(path + filename);
			if (f.exists()) { 
				f.delete();
			}
		}
		
		//레코드 삭제.
		productService.deleteProduct(product_id);
		
		// 화면 이동
		return "redirect:/shop/product/list.do";
	}


- src\main\java\com\example\spring02\service\shop -> ProductServiceImpl(기존) productService.fileInfo작업

	...
	@Override
	public String fileInfo(int product_id) {
		return productDao.fileInfo(product_id);
	}

 
- src\main\java\com\example\spring02\model\shop\dao -> ProductDAOImpl (기존) productService.fileInfo작업

	...
	@Override
	public String fileInfo(int product_id) {
		return sqlSession.selectOne("product.fileInfo", product_id);
	}

 
- src\main\resources\mappers\shop\productMapper (기존)	productService.fileInfo작업

sql) select picture_url
       from product
      where product_id = 1;

selectOne() 레코드가 1개 -> 리턴 타입 : dto
selectList() 레코드가 2개 -> 리턴 타입 : [], ArrayList
	
	...
	<select id="fileInfo"
			parameterType="com.example.spring02.model.shop.dto.ProductDTO"
			resultType="String">
			select picture_url
			  from product
			 where product_id = #{product_id}
			</select>

- src\main\java\com\example\spring02\service\shop -> ProductServiceImpl(기존) productService.deleteProduct 작업

	...
	@Override
	public void deleteProduct(int product_id) {
		productDao.deleteProduct(product_id);
	}

- src\main\java\com\example\spring02\model\shop\dao -> ProductDAOImpl (기존) productService.deleteProduct 작업

	...
	@Override
	public void deleteProduct(int product_id) {
		sqlSession.delete("product.product_delete", product_id);
	}

- src\main\resources\mappers\shop\productMapper (기존)	productService.deleteProduct 작업

	...
	<delete id="product_delete">
			delete
			  from product
			 where product_id = #{product_id}
	</delete>

- src\main\webapp\WEB-INF\views - > home (기존)
	
	...
	<c:if test="${sessionScope.userid != null}">
	<h2>${sessionScope.name}  <br>
	(ID : ${sessionScope.userid}님의 방문을 환영합니다.).
	</h2>
</c:if>

<h1>
	환영 환영 환영
</h1>

<P>  The time on the server is ${serverTime}. </P>
	<%-- <%=application.getRealPath("/") %> --%>
	<%= application.getRealPath("WEB-IF/views/images/") %> << 추가
</body>
</html>

- 무결성 제약 오류
cart 테이블 레코드 삭제
delete from cart;
commit;